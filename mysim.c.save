/*************************
Date: 11/24/2023
Class: CS4541
Assignment: Memory Allocation Lab
Author(s): Ramses Larabel
**************************/

#include <stdio.h>
#include <stdbool.h>
#include <string.h>
#include <stdlib.h>
#include <stdint.h>

struct Data {
	int new_block_ref;
	int old_block_ref;
	int size;
	char op_field;
};

struct Data* parseFile(const char*, int*);
//int cacheSimulator(struct cacheLine*, uint64_t, uint64_t, int, int);
//void printVerbose(char, uint64_t, int, int, int);

int main(int argc, char* argv[]) {
	char filename[150], output_path[150];
	bool list_type;				// false for implicit list and true for explicit list
	bool fit_type;				// false for First fit and Best fit allocation
        int var_count = 0;
        bool v = false, arg_error = false;
        for  (i = 1; i < argc; i++) {
		if (strcmp(argv[i], "--free-list==implicit") == 0) {
                        list_type = false;
			var_count++;
                } else if (strcmp(argv[i], "--free-list==explicit") == 0) {
                        list_type = true;
                	var_count++;
		} else if (strcmp(argv[i], "--fit==first") == 0) {
			fit_type = false;
			var_count++;
		} else if (strcmp(argv[i], "--fit==best") == 0) {
			fit_type = true;
			var_count++;
                } else {
		if (i == 1){
                        if (strcmp(argv[1], "-v") == 0) v = true;
                        else if (strcmp(argv[2], "-o") == 0) s = atoi(argv[2]);
                } else if (i == 2){
			if (strcmp(argv[2], "-o") == 0) s = atoi(argv[2]);
                } else if (i == argc-1) strcpy();
        }
        if (arg_error || (var_count != 3)) {
                printf("Bad file name\n");
                printf("usage: ./mysim: [-v] [-o <output-path>] --free-list={implicit or explicit} --fit={first or best} <input file>\n");
                printf("-v: Optional verbose flag that displays trace info\n");
        }

	if(!arg_error) {
		struct Data* data = parseFile(filename, &n);

		// Going through each line in the input file
		for (i = 0; i < n; i++) {
        		if(data[i].op_field == 'a') {}
			else if(data[i].op_field == 'r') {}
			else if(data[i].op_field == 'f') {}
		}
	}
	return 0;
}

struct Data* parseFile(const char* filename, int* numRecords) {
    FILE* file = fopen(filename, "r");
    if (file == NULL) {
        fprintf(stderr, "Unable to open the file: %s\n", filename);
        exit(1);
    }

    // Define an initial array size 
    int capacity = 10;
    struct Data* data = (struct Data*)malloc(capacity * sizeof(struct Data));
    if (data == NULL) {
        fprintf(stderr, "Memory allocation error.\n");
        exit(1);
    }

    int count = 0;
    char line[256]; // Assuming a maximum line length of 255 characters

    while (fgets(line, sizeof(line), file)) {
        // Parse the line based on the format
        long op_address;
        int size;
        char op_field;

        if (sscanf(line, " %c %lx,%d\n", &op_field, &op_address, &size) == 3 ||
            sscanf(line, "I %lx,%d\n", &op_address, &size) == 2) {
            // Check if the array needs to be resized
            if (count >= capacity) {
                capacity *= 2;
                data = (struct Data*)realloc(data, capacity * sizeof(struct Data));
                if (data == NULL) {
                    fprintf(stderr, "Memory allocation error.\n");
                    exit(1);
                }
            }

            // Store the parsed data in the struct array
            data[count].op_field = op_field;
            data[count].op_address = op_address;
            data[count].size = size;

            count++;
        } else {
            fprintf(stderr, "Invalid line in the file: %s", line);
        }
    }

    fclose(file);

    // Update the number of records parsed and return the array
    *numRecords = count;
    return data;
}

// Input: Simulated Cache, set index value given by the address, tag value given by address, total set, total lines per set
// Output: an interger value: 0 a hit, 1 a miss, 2 a miss eviction
int cacheSimulator(struct cacheLine* cache, uint64_t sData, uint64_t tData, int S, int E) {
	int j, result = 2;
	// Iterates through each line in the given set to determine hit or miss
	// If line is not valid put data there because the rest of the lines also won't be valid
	for (j = 0; j < E; j++) {
		if (cache[sData + S * j].valid == 1) {
			if (cache[sData + S * j].tag == tData) {
				result = 0;
			}
		} else {
			cache[sData + S * j].tag = tData;
			cache[sData + S * j].valid = 1;
			result = 1;
		}
	}
	// Handling eviction misses: This means address did not hit and there was no room
	// Popping the first line of the set and apending the the new tag
	if (result == 2) {
		for(j = 1; j < E; j++) {
			cache[sData + S * (j - 1)].tag = cache[sData + S * j].tag;
		}
		cache[sData + S * (E - 1)].tag = tData;
	}
	return result;
}

void printVerbose(char op_field, uint64_t op_address, int op_size, int loadResult, int storeResult) {
	char result1[25], result2[25];
	if (loadResult == 0) strcpy(result1, "hit");
	else if (loadResult == 1) strcpy(result1, "miss");
	else if (loadResult == 2) strcpy(result1, "eviction miss");
	if (storeResult == 0) strcpy(result2, "hit");
        else if (storeResult == 1) strcpy(result2, "miss");
        else if (storeResult == 2) strcpy(result2, "eviction miss");

	if (op_field == 'L') printf("L %lx,%d %s\n", op_address, op_size, result1);
	else if (op_field == 'S') printf("S %lx,%d %s\n", op_address, op_size, result2);
	else if (op_field == 'M') printf("M %lx,%d %s %s\n", op_address, op_size, result1, result2);
	printf("\n");
}
